#!/usr/bin/env bash

EVM_LOGS_CANISTER=evm_logs_canister
TEST_CANISTER=test_canister1
PROXY_CANISTER=proxy_canister
EVM_RPC_CANISTER=evm_rpc

CANISTER_WASM=target/wasm32-unknown-unknown/release/$(echo $EVM_LOGS_CANISTER | tr '-' '_').wasm

check_error() {
    if [ $? -ne 0 ]; then
        echo "$1"
        exit 1
    fi
}

# Build the canisters
build_canisters() {
    echo "Building canisters..."
    cargo build --release --target wasm32-unknown-unknown --package $EVM_LOGS_CANISTER
    check_error "Build failed"
    echo "Build successful"
}

# Deploy the canisters
deploy_canisters() {
    echo "Deploying test canister..."
    dfx deploy $TEST_CANISTER
    check_error "Test canister deployment failed"

    echo "Deploying proxy canister..."
    dfx deploy $PROXY_CANISTER
    check_error "proxy canister deployment failed"

    # Get the Proxy canister ID
    PROXY_CANISTER_ID=$(dfx canister id $PROXY_CANISTER)
    check_error "Failed to retrieve Proxy canister id"
    echo "Proxy canister id: $PROXY_CANISTER_ID"

    # Deploy EVM Logs Canister
    echo "Deploying EVM logs canister with Proxy canister ID as argument..."
    dfx deploy $EVM_LOGS_CANISTER --argument "(principal \"${PROXY_CANISTER_ID}\")"
    check_error "EVM Logs canister deployment failed"

    # Get the EVM Logs canister ID
    EVM_LOGS_CANISTER_ID=$(dfx canister id $EVM_LOGS_CANISTER)
    check_error "Failed to retrieve EVM Logs canister id"
    echo "Evm Logs canister id: $EVM_LOGS_CANISTER_ID"

    # Deploy EVM RPC CANISTER
    echo "Deploying EVM RPC Canister"
    dfx deploy $EVM_RPC_CANISTER
    check_error "EVM RPC Canister deployment failed"
}

# Main script execution
case "$1" in
    build)
        build_canisters
        ;;
    deploy)
        deploy_canisters
        ;;
    *)
        echo "Usage: $0 {build|deploy}"
        exit 1
        ;;
esac

echo "Done"
