type Config = record {
  estimate_events_num : nat32;
  proxy_canister : principal;
  evm_rpc_canister : principal;
};

type Event = record {
  id : nat;
  prev_id : opt nat;
  data : Value;
  headers : opt vec Map;
  chain_id : nat32;
  topics : opt vec text;
  address : text;
  timestamp : nat64;
  tx_hash : text;
};

type Filter = record {
  topics : opt vec vec text;
  address : text;
};

type GenericError = record {
  message : text;
  error_code : nat;
};

type Map = record {
  key : Value;
  value : Value;
};

type RegisterSubscriptionError = variant {
  SameFilterExists;
  GenericError : GenericError;
  ImproperConfig : text;
  InvalidChainName;
  UnauthorizedSubscriber : record { namespace : text };
  Unauthorized;
  InsufficientFunds;
};

type RegisterSubscriptionResult = variant {
  Ok : nat;
  Err : RegisterSubscriptionError;
};

type SubscriptionInfo = record {
  subscription_id : nat;
  stats : vec Map;
  filter : Filter;
  chain_id : nat32;
  subscriber_principal : principal;
};

type SubscriptionRegistration = record {
  memo : opt blob;
  filter : Filter;
  chain_id : nat32;
  canister_to_top_up : principal;
};

type TopUpBalanceError = variant { GenericError };

type TopUpBalanceResult = variant { 
  Ok; 
  Err : TopUpBalanceError;
};

type UnsubscribeResult = variant { 
  Ok : record {}; 
  Err : text;
};

type Value = variant {
  Map : Vec;
  Nat : nat;
  Bool : bool;
  Text : text;
  Bytes : blob;
  Float : float64;
  Principal : principal;
};

type Vec = vec record {
  key : variant {
    Map : Vec;
    Nat : nat;
    Bool : bool;
    Text : text;
    Bytes : blob;
    Float : float64;
    Principal : principal;
  };
  value : variant {
    Map : Vec;
    Nat : nat;
    Bool : bool;
    Text : text;
    Bytes : blob;
    Float : float64;
    Principal : principal;
  };
};

service : (Config) -> {
  get_active_filters : () -> (vec Filter) query;
  get_balance : (principal) -> (nat) query;
  get_candid_pointer : () -> (text) query;
  get_subscriptions : (opt nat32, opt nat, opt vec Filter) -> (vec SubscriptionInfo) query;
  get_user_subscriptions : () -> (vec SubscriptionInfo) query;
  icrc72_publish : (vec Event) -> ();
  publish_events : (vec Event) -> ();
  subscribe : (SubscriptionRegistration) -> (RegisterSubscriptionResult);
  top_up_balance : (principal) -> (TopUpBalanceResult);
  unsubscribe : (nat) -> (UnsubscribeResult);
};
