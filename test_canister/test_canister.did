type CanisterLogFeature = variant {
  filterMessageByContains;
  filterMessageByRegex;
};
type CanisterLogMessages = record {
  data : vec LogMessageData;
  lastAnalyzedMessageTimeNanos : opt nat64;
};
type CanisterLogMessagesInfo = record {
  features : vec opt CanisterLogFeature;
  lastTimeNanos : opt nat64;
  count : nat32;
  firstTimeNanos : opt nat64;
};
type CanisterLogRequest = variant {
  getMessagesInfo;
  getMessages : GetLogMessagesParameters;
  getLatestMessages : GetLatestLogMessagesParameters;
};
type CanisterLogResponse = variant {
  messagesInfo : CanisterLogMessagesInfo;
  messages : CanisterLogMessages;
};
type CanisterMetrics = record { data : CanisterMetricsData };
type CanisterMetricsData = variant {
  hourly : vec HourlyMetricsData;
  daily : vec DailyMetricsData;
};
type CollectMetricsRequestType = variant { force; normal };
type DailyMetricsData = record {
  updateCalls : nat64;
  canisterHeapMemorySize : NumericEntity;
  canisterCycles : NumericEntity;
  canisterMemorySize : NumericEntity;
  timeMillis : int;
};
type DecodedNotification = record {
  notification : EventNotification;
  tokens : vec SolidityToken;
};
type EventNotification = record {
  source : principal;
  filter : opt text;
  chain_id : nat32;
  sub_id : nat;
  timestamp : nat64;
  event_id : nat;
  log_entry : LogEntry;
};
type Filter = record { topics : opt vec vec text; address : text };
type GetInformationRequest = record {
  status : opt StatusRequest;
  metrics : opt MetricsRequest;
  logs : opt CanisterLogRequest;
  version : bool;
};
type GetInformationResponse = record {
  status : opt StatusResponse;
  metrics : opt MetricsResponse;
  logs : opt CanisterLogResponse;
  version : opt nat;
};
type GetLatestLogMessagesParameters = record {
  upToTimeNanos : opt nat64;
  count : nat32;
  filter : opt GetLogMessagesFilter;
};
type GetLogMessagesFilter = record {
  analyzeCount : nat32;
  messageRegex : opt text;
  messageContains : opt text;
};
type GetLogMessagesParameters = record {
  count : nat32;
  filter : opt GetLogMessagesFilter;
  fromTimeNanos : opt nat64;
};
type GetMetricsParameters = record {
  dateToMillis : nat;
  granularity : MetricsGranularity;
  dateFromMillis : nat;
};
type HourlyMetricsData = record {
  updateCalls : vec nat64;
  canisterHeapMemorySize : vec nat64;
  canisterCycles : vec nat64;
  canisterMemorySize : vec nat64;
  timeMillis : int;
};
type LogEntry = record {
  transactionHash : opt text;
  blockNumber : opt nat;
  data : text;
  blockHash : opt text;
  transactionIndex : opt nat;
  topics : vec text;
  address : text;
  logIndex : opt nat;
  removed : bool;
};
type LogMessageData = record { timeNanos : nat64; message : text };
type Map = record { key : Value; value : Value };
type MetricsGranularity = variant { hourly; daily };
type MetricsRequest = record { parameters : GetMetricsParameters };
type MetricsResponse = record { metrics : opt CanisterMetrics };
type NumericEntity = record {
  avg : nat64;
  max : nat64;
  min : nat64;
  first : nat64;
  last : nat64;
};
type SolidityToken = variant {
  Int : text;
  FixedArray : Vec;
  Bool : bool;
  Uint : text;
  String : text;
  Bytes : blob;
  Address : text;
  FixedBytes : blob;
  Tuple : Vec;
  Array : Vec;
};
type StatusRequest = record {
  memory_size : bool;
  cycles : bool;
  heap_memory_size : bool;
};
type StatusResponse = record {
  memory_size : opt nat64;
  cycles : opt nat64;
  heap_memory_size : opt nat64;
};
type SubscriptionInfo = record {
  subscription_id : nat;
  stats : vec Map;
  filter : Filter;
  chain_id : nat32;
  subscriber_principal : principal;
};
type UpdateInformationRequest = record {
  metrics : opt CollectMetricsRequestType;
};
type Value = variant {
  Map : Vec_1;
  Nat : nat;
  Bool : bool;
  Text : text;
  Bytes : blob;
  Float : float64;
  Principal : principal;
};
type Vec = vec variant {
  Int : text;
  FixedArray : Vec;
  Bool : bool;
  Uint : text;
  String : text;
  Bytes : blob;
  Address : text;
  FixedBytes : blob;
  Tuple : Vec;
  Array : Vec;
};
type Vec_1 = vec record {
  key : variant {
    Map : Vec_1;
    Nat : nat;
    Bool : bool;
    Text : text;
    Bytes : blob;
    Float : float64;
    Principal : principal;
  };
  value : variant {
    Map : Vec_1;
    Nat : nat;
    Bool : bool;
    Text : text;
    Bytes : blob;
    Float : float64;
    Principal : principal;
  };
};
service : () -> {
  getCanistergeekInformation : (GetInformationRequest) -> (
      GetInformationResponse,
    ) query;
  get_current_balance : () -> (nat) query;
  get_decoded_notifications : () -> (vec DecodedNotification) query;
  get_decoded_notifications_by_subscription : (nat) -> (
      vec DecodedNotification,
    ) query;
  get_notifications : () -> (vec EventNotification) query;
  get_subscriptions : (principal) -> (vec SubscriptionInfo);
  handle_notification : (EventNotification) -> ();
  subscribe : (principal) -> ();
  subscribe_base_swaps : (principal) -> ();
  subscribe_chainfusion : (principal) -> ();
  subscribe_etherum_sync : (principal) -> ();
  subscribe_fantom_token : (principal) -> ();
  subscribe_primex : (principal) -> ();
  subscribe_test : (principal) -> ();
  subscribe_token_exchange : (principal) -> ();
  subscribe_uniswap_exchange_1 : (principal) -> ();
  top_up_evm_logs_canister : (principal, nat) -> ();
  unsubscribe : (principal, nat) -> ();
  updateCanistergeekInformation : (UpdateInformationRequest) -> ();
}
