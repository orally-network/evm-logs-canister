type DecodedNotification = record {
  notification : EventNotification;
  tokens : vec SolidityToken;
};
type EventNotification = record {
  source : principal;
  filter : opt text;
  chain_id : nat32;
  sub_id : nat;
  timestamp : nat64;
  event_id : nat;
  log_entry : LogEntry;
};
type Filter = record { topics : opt vec vec text; address : text };
type LogEntry = record {
  transactionHash : opt text;
  blockNumber : opt nat;
  data : text;
  blockHash : opt text;
  transactionIndex : opt nat;
  topics : vec text;
  address : text;
  logIndex : opt nat;
  removed : bool;
};
type Map = record { key : Value; value : Value };
type SolidityToken = variant {
  Int : text;
  FixedArray : Vec;
  Bool : bool;
  Uint : text;
  String : text;
  Bytes : blob;
  Address : text;
  FixedBytes : blob;
  Tuple : Vec;
  Array : Vec;
};
type SubscriptionInfo = record {
  subscription_id : nat;
  stats : vec Map;
  filter : Filter;
  chain_id : nat32;
  subscriber_principal : principal;
};
type Value = variant {
  Map : Vec_1;
  Nat : nat;
  Bool : bool;
  Text : text;
  Bytes : blob;
  Float : float64;
  Principal : principal;
};
type Vec = vec variant {
  Int : text;
  FixedArray : Vec;
  Bool : bool;
  Uint : text;
  String : text;
  Bytes : blob;
  Address : text;
  FixedBytes : blob;
  Tuple : Vec;
  Array : Vec;
};
type Vec_1 = vec record {
  key : variant {
    Map : Vec_1;
    Nat : nat;
    Bool : bool;
    Text : text;
    Bytes : blob;
    Float : float64;
    Principal : principal;
  };
  value : variant {
    Map : Vec_1;
    Nat : nat;
    Bool : bool;
    Text : text;
    Bytes : blob;
    Float : float64;
    Principal : principal;
  };
};
service : () -> {
  get_decoded_notifications : () -> (vec DecodedNotification) query;
  get_decoded_notifications_by_subscription : (nat) -> (
      vec DecodedNotification,
    ) query;
  get_notifications : () -> (vec EventNotification) query;
  get_subscriptions : (principal) -> (vec SubscriptionInfo);
  handle_notification : (EventNotification) -> ();
  subscribe : (principal) -> ();
  subscribe_test : (principal) -> ();
  unsubscribe : (principal, nat) -> ();
}
